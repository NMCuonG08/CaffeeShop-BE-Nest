generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  email               String         @unique
  hash                String?
  firstName           String?
  lastName            String?
  home_store          Int?
  customer_since      DateTime?
  loyalty_card_number String?
  birthdate           DateTime?
  gender              String?
  birth_year          Int?
  picture             String?        @default("https://res.cloudinary.com/dj9r2qksh/image/upload/v1740839376/newspaper_images/hhbo5chxdtudnaliaiqx.jpg")
  provider            String?        @default("LOCAL")
  providerId          String?
  role                Role           @default(USER)
  Feedback            Feedback[]
  salesreceipt        SalesReceipt[]
  homeStore           Sale_Outlet?   @relation("StoreCustomers", fields: [home_store], references: [sales_outlet_id])
  userInfos           UserInfo[]
  orders              Order[]

  @@index([home_store], map: "users_home_store_fkey")
  @@map("users")
}

model Feedback {
  id        Int            @id @default(autoincrement())
  content   String         @db.Text
  rating    Int            @default(5)
  type      FeedbackType   @default(REVIEW)
  status    FeedbackStatus @default(PENDING)
  userId    Int
  productId Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   Product        @relation(fields: [productId], references: [product_id], onDelete: Cascade) // Fixed from id to product_id
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@index([productId])
  @@index([userId])
  @@index([rating])
  @@index([createdAt])
  @@map("feedbacks")
}

model DateInfo {
  id               Int      @id @default(autoincrement())
  transaction_date DateTime @default(now())
  week_id          Int
  week_desc        String
  month_id         Int
  month_name       String
  quarter_id       Int
  quarter_name     String
  year_id          Int
}

model Image {
  id           Int            @id @default(autoincrement())
  url          String         @default("https://res.cloudinary.com/dj9r2qksh/image/upload/v1748052303/coffee-6467644_1280_hhpgwj.jpg")
  publicId     String
  createdAt    DateTime       @default(now())
  product      Product[]
  productimage ProductImage[]
}

model Pastry_Inventory {
  id               Int         @id @default(autoincrement())
  sales_outlet_id  Int
  transaction_date DateTime    @default(now())
  product_id       Int
  start_of_day     Int?
  quantity_sold    Int?
  waste            Int?
  product          Product     @relation(fields: [product_id], references: [product_id], map: "Pastry_Inventory_product_id_fkey")
  sale_outlet      Sale_Outlet @relation(fields: [sales_outlet_id], references: [sales_outlet_id], map: "Pastry_Inventory_sales_outlet_id_fkey")

  @@index([product_id], map: "Pastry_Inventory_product_id_fkey")
  @@index([sales_outlet_id], map: "Pastry_Inventory_sales_outlet_id_fkey")
}

model Product {
  product_id              Int                @id @default(autoincrement())
  product_group           String?
  product_category        String?
  product_type            String?
  product                 String?
  product_description     String?
  unit_of_measure         String?
  current_wholesale_price Float?
  current_retail_price    Float?
  tax_exempt_yn           Boolean?
  promo_yn                Boolean?
  new_product_yn          Boolean?
  imageId                 Int?
  isActive                Boolean            @default(true)
  stock                   Int                @default(10)
  Feedback                Feedback[]
  pastry_inventory        Pastry_Inventory[]
  product_image_cover     Image?             @relation(fields: [imageId], references: [id], map: "Product_imageId_fkey")
  productimage            ProductImage[]
  salesreceipt            SalesReceipt[]
  orderItems              OrderItem[]

  @@index([imageId], map: "Product_imageId_fkey")
}

model ProductImage {
  productId Int
  imageId   Int
  image     Image   @relation(fields: [imageId], references: [id], map: "ProductImage_imageId_fkey")
  product   Product @relation(fields: [productId], references: [product_id], map: "ProductImage_productId_fkey")

  @@id([productId, imageId])
  @@index([imageId], map: "ProductImage_imageId_fkey")
}

model Sale_Outlet {
  sales_outlet_id      Int                @id @default(autoincrement())
  sales_outlet_type    String?
  store_square_feet    Int?
  store_address        String?
  store_city           String?
  store_state_province String?
  store_telephone      String?
  store_postal_code    String?
  store_longitude      Float?
  store_latitude       Float?
  manager_id           Int?
  Neighorhood          String
  pastry_inventory     Pastry_Inventory[]
  staff                Staff?             @relation(fields: [manager_id], references: [staff_id], map: "Sale_Outlet_manager_id_fkey")
  sales_target         sales_target[]
  salesreceipt         SalesReceipt[]
  customers            User[]             @relation("StoreCustomers")

  @@index([manager_id], map: "Sale_Outlet_manager_id_fkey")
}

model sales_target {
  id                Int         @id @default(autoincrement())
  sales_outlet_id   Int
  year_month        String?
  beans_goal        Int?
  beverage_goal     Int?
  food_goal         Int?
  merchandise__goal Int         @map("merchandise _goal")
  total_goal        Int?
  sale_outlet       Sale_Outlet @relation(fields: [sales_outlet_id], references: [sales_outlet_id], map: "Sales_Target_sales_outlet_id_fkey")

  @@index([sales_outlet_id], map: "Sales_Target_sales_outlet_id_fkey")
}

model SalesReceipt {
  transaction_id   Int         @id @default(autoincrement())
  transaction_date DateTime
  transaction_time DateTime
  sales_outlet_id  Int
  staff_id         Int
  user_id          Int
  instore_yn       Boolean
  order            Int
  line_item_id     Int
  product_id       Int
  quantity         Int
  line_item_amount Float
  unit_price       Float
  promo_item_yn    Boolean
  product          Product     @relation(fields: [product_id], references: [product_id], map: "SalesReceipt_product_id_fkey")
  sale_outlet      Sale_Outlet @relation(fields: [sales_outlet_id], references: [sales_outlet_id], map: "SalesReceipt_sales_outlet_id_fkey")
  staff            Staff       @relation(fields: [staff_id], references: [staff_id], map: "SalesReceipt_staff_id_fkey")
  users            User        @relation(fields: [user_id], references: [id], map: "SalesReceipt_user_id_fkey")

  @@index([product_id], map: "SalesReceipt_product_id_fkey")
  @@index([sales_outlet_id], map: "SalesReceipt_sales_outlet_id_fkey")
  @@index([staff_id], map: "SalesReceipt_staff_id_fkey")
  @@index([user_id], map: "SalesReceipt_user_id_fkey")
}

model Staff {
  staff_id     Int            @id @default(autoincrement())
  first_name   String?
  last_name    String?
  position     String?
  start_date   DateTime       @default(now())
  location     String?
  sale_outlet  Sale_Outlet[]
  salesreceipt SalesReceipt[]
}

model UserInfo {
  id       Int     @id @default(autoincrement())
  fullName String
  email    String
  phone    String
  city     String
  district String
  ward     String
  address  String
  notes    String?

  userId Int?
  user   User? @relation(fields: [userId], references: [id])

  orders Order[]
}

model Order {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  totalAmount Int
  status      String   @default("pending")

  userId      Int?
  user        User?       @relation(fields: [userId], references: [id])
  paymentType PaymentType @default(COD)
  userInfoId  Int
  userInfo    UserInfo    @relation(fields: [userInfoId], references: [id])

  items OrderItem[]
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  unitPrice Float?
  productId Int
  quantity  Int
  product   Product? @relation(fields: [productId], references: [product_id])
}

enum Role {
  USER
  ADMIN
}

enum FeedbackType {
  REVIEW
  COMPLAINT
  SUGGESTION
  COMPLIMENT
}

enum PaymentType {
  COD // Cash on Delivery
  VNPAY
  MOMO
}

enum FeedbackStatus {
  PENDING
  APPROVED
  REJECTED
  HIDDEN
}
